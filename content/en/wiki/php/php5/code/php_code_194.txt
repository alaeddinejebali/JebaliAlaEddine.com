<pre><code class="php">
class PropertyTest{
    private $data = array();
    public $declared = 1;
    private $hidden = 2;

    public function __set($name, $value){
        echo "Setting '$name' to '$value'";
        $this->data[$name] = $value;
    }

    public function __get($name){
        echo "Getting '$name'\n";
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }
        $trace = debug_backtrace();
        trigger_error(
            'Undefined property via __get(): ' . $name .
            ' in ' . $trace[0]['file'] .
            ' on line ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }

    public function __isset($name){
        echo "Is '$name' set?\n";
        return isset($this->data[$name]);
    }

    public function __unset($name){
        echo "Unsetting '$name'\n";
        unset($this->data[$name]);
    }

    // Not a magic method, just here for example
    public function getHidden(){
        return $this->hidden;
    }
}


$obj = new PropertyTest;

$obj->a = 1;
// outputs: Setting 'a' to '1'

echo $obj->a;
// outputs: Getting 'a'
// outputs: 1

var_dump(isset($obj->a));
// outputs: Is 'a' set?
// outputs: bool(true)

unset($obj->a);
// outputs: Unsetting 'a'

var_dump(isset($obj->a));
// outputs: Is 'a' set?
// outputs: bool(false)

echo $obj->declared . "\n\n";
// outputs: 1

// Let's experiment with the private property named 'hidden'
// Privates are visible inside the class, so __get() not used
echo $obj->getHidden();
// outputs: 2

// Privates not visible outside of class, so __get() is used
echo $obj->hidden;
// outputs: Getting 'hidden'
</code></pre>